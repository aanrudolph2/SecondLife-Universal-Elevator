/* USAGE
 * 
 * Description of Lift must match names of Waypoints
 * If lift script must be reset, do not reset waypoints.
 *
 * Floor Call buttons must be named "button"
 * Descriptions must be a numeral corresponding to the button's
 * respective waypoint
 *
 */

integer waypoint_detect_listener;
integer call_listener;

list waypoints = [];
list stop_queue = [];

integer SORT_LIST = TRUE;

integer is_moving = FALSE;
key target_id;
vector target_pos;

key http_url_req;
string call_req_url;

integer num_levels = 12;

move_to_floor(vector pos)
{
    // llOwnerSay("Moving to position: " + (string)pos);
    llTarget(pos, 1.0);
    
    vector target = pos - llGetPos();
    is_moving = TRUE;
    
    float frames = 45/llGetRegionFPS();
    float time = llVecMag(target)/2;
    
    if(time >= 0.1)
    {
        llSetKeyframedMotion([target, frames*time], [KFM_DATA, KFM_TRANSLATION]);
        llPlaySound("e85eec78-74e9-e0d3-62a7-e609c37ef6b3", 0.5);
        llSleep(0.1);
        llLoopSound("9bd30961-fee3-a546-c786-222cc7c8cbde", 0.5);
    }
}

check_and_move()
{
    if(!is_moving && llGetListLength(stop_queue) > 0)
    {
        if(target_id != NULL_KEY)
        {
            llRegionSayTo(target_id, -25, "CLOSE");
        }
        
        target_id = (key)llList2String(stop_queue, 1);
        target_pos = llList2Vector(llGetObjectDetails(target_id, [OBJECT_POS]), 0);
        stop_queue = llDeleteSubList(stop_queue, 0, 1);
        //llOwnerSay("Moving to position: " + (string)target_pos);
        move_to_floor(target_pos);
    }
}

handle_click(string move_idx)
{
    integer waypoint_start_idx = llListFindList(waypoints, [move_idx]);
    stop_queue = llList2List(waypoints, waypoint_start_idx, waypoint_start_idx + 1) + stop_queue;
    check_and_move();
}

default
{
    state_entry()
    {
        llSetSoundQueueing(TRUE);
        
        http_url_req = llRequestURL();
        
        llSetKeyframedMotion([ZERO_VECTOR, 1], [KFM_DATA, KFM_TRANSLATION]);
    }
    
    changed(integer chg)
    {
        if(chg & CHANGED_REGION_START)
        {
            http_url_req = llRequestURL();
        }
    }
    
    http_request(key id, string method, string body)
    {
        if(id == http_url_req && method == URL_REQUEST_GRANTED)
        {
            call_req_url = body;
            
            // Uncomment for Debug
            //llOwnerSay(call_req_url);
            
            llRegionSay(-25, llList2CSV(["WAYPOINT DETECT", llGetObjectDesc(), call_req_url]));
        }
        else
        {
            // Waypoint Registration
            if(method == "POST")
            {
                list identifier = llCSV2List(body);
                if(llListFindList(waypoints, identifier) < 0)
                {
                    waypoints += identifier;
                    llHTTPResponse(id, 200, "Success");
                }
                else
                {
                    llHTTPResponse(id, 200, "Failure");
                }
            }
            // Call to floor
            else if(method == "PUT")
            {
                integer index = llListFindList(waypoints, [llList2String(llCSV2List(body), 0)]);
                if(index >= 0)
                {
                    // Uncomment for debug
                    //llOwnerSay("Request for floor: " + body);
                    
                    // If last waypoint is not the same as this one (person didn't hit button more than once)
                    if(llList2String(stop_queue, -1) != body)
                    {
                        // Enqueue floor onto stop queue
                        stop_queue += llCSV2List(body);
                        llHTTPResponse(id, 200, "OK");
                    }
                    check_and_move();
                }
                else
                {
                    // Uncomment for debug
                    //llOwnerSay("Request for unknown floor: " + body);
                }
            }
        }
    }
    touch_start(integer num)
    {
        if(llGetLinkName(llDetectedLinkNumber(0)) == "button")
        {
            vector touchUV = llDetectedTouchST(0);
            
            integer floor = llRound((touchUV.y * num_levels) + 0.5);
            
            handle_click((string)floor);
        }
    }
    at_target(integer target, vector targPos, vector myPos)
    {
        if(is_moving)
        {
            if(target_id != NULL_KEY)
                llRegionSayTo(target_id, -25, "OFF");
            llTargetRemove(target);
            llStopSound();
            
            if(llVecDist(targPos, myPos) > 0.25)
            {
                llSetKeyframedMotion([targPos - llGetPos(), 0.5], [KFM_DATA, KFM_TRANSLATION]);
                llSleep(0.5);
            }
            llSetKeyframedMotion([], [KFM_COMMAND, KFM_CMD_STOP]);
            
            llSetPos(targPos);
            llPlaySound("d1b034c2-c7a2-35a0-81db-6fffe03b6fe5", 0.5);
            llSetTimerEvent(5.0);
        }
    }
    timer()
    {
        llSetTimerEvent(0.0);
        is_moving = FALSE;
        check_and_move();
    }
}
